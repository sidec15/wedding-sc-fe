@use "../../../styles/variables.scss" as *;

@mixin shadow-gradient($direction: to top) {
  content: "";
  position: absolute;
  left: 0;
  width: 100%;
  height: 20%; // Adjust height to control the size of the shadow area
  z-index: 3;
  background: linear-gradient(
    $direction,
    rgba(var(--inner-shadow), 0.8),
    transparent
  ); // Simulates a shadow fading in the specified direction
  pointer-events: none;
}

html,
body {
  height: 100%;
  scroll-behavior: auto;
  overflow-y: auto;
}

section {
  margin-bottom: 80px;
}

h1 {
  color: rgb(var(--accent));
  font-size: 3rem;
  margin-bottom: 1rem;
}
h2 {
  color: rgb(var(--accent));
  font-size: 2rem;
  margin-bottom: 0.5rem;
}
p {
  font-size: 1.5rem;
  color: rgb(var(--text));
}

// HERO SECTION
.church-hero {
  position: relative; // Required for pseudo-elements to position correctly
  width: 100%;
  height: 100vh; // Full viewport height
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;

  .hero-image {
    background-image: url("/images/church/church-02.jpg");
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .hero-overlay {
    width: 70%;
    position: relative;
    z-index: 2;
    text-align: center;
    padding: 1rem;
    background: rgba(var(--text-mask), 0.9);
    transition: opacity 0.2s ease-out;
    will-change: opacity, transform;
  }

  // Add shadow effect at the top
  &::before {
    @include shadow-gradient(to bottom); // Shadow fades downward
    top: 0; // Position at the top
  }

  // Add shadow effect at the bottom
  &::after {
    @include shadow-gradient(to top); // Shadow fades upward
    bottom: 0; // Position at the bottom
  }
}

// ORIGINI E STORIA SECTION
.church-history {
  position: relative;
  display: flex;
  flex-direction: row;
  overflow: hidden;

  .image-container {
    overflow: hidden;
    width: 100%;
    height: 70vh;
    position: relative;
  
    .scroll-track {
      display: flex;
      width: max-content;
      height: 100%;
      animation: scroll-horizontal 30s linear infinite;
    }
  
    .image {
      flex: 0 0 auto;
      height: 100%;
      width: auto;
      object-fit: cover;
    }
  }
  
  .text-content {
    position: absolute; // Overlay the text on the image
    right: 0; // Attach the text to the right corner
    top: 0; // Start at the top of the image
    height: 100%; // Span the full height of the image
    width: 30%; // Take up 30% of the width
    padding-left: 1rem; // Add padding to the left
    padding-right: 1rem; // Add padding to the right
    background-color: rgba(var(--text-mask), 0.9); // Semi-transparent background for readability
    color: rgb(var(--text)); // Use the text color from variables
    z-index: 2; // Ensure the text is above the image
    justify-content: center; // Center the text vertically

    h2 {
      font-size: 2.5rem;
      margin-bottom: 1.5rem;
      color: rgb(var(--accent)); // Accent color for the title
    }

    p {
      font-size: 1.2rem;
      line-height: 1.8;
      color: rgb(var(--text)); // Text color for paragraphs
      margin-bottom: 1rem;
    }
  }

  // Add shadow effect at the top
  &::before {
    @include shadow-gradient(to bottom); // Shadow fades downward
    top: 0;
  }

  // Add shadow effect at the bottom
  &::after {
    @include shadow-gradient(to top); // Shadow fades upward
    bottom: 0;
  }

  @media (max-width: 768px) {
    flex-direction: column;

    .image-parallax {
      height: 40vh; // Adjust height for smaller screens
    }

    .text-content {
      position: relative; // Stack text below the image
      width: 100%; // Full width for smaller screens
      height: auto; // Adjust height for smaller screens
      top: auto;
      transform: none;
      padding: 1.5rem;
      background-color: rgba(0, 0, 0, 0.7); // Slightly darker background for readability
    }
  }
}

// Keyframes for horizontal scrolling
@keyframes scroll-horizontal {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-50%);
  }
}
